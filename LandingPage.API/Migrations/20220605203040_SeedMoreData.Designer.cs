// <auto-generated />
using System;
using LandingPage.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LandingPage.API.Migrations
{
    [DbContext(typeof(AthenaPayLandingPageDbContext))]
    [Migration("20220605203040_SeedMoreData")]
    partial class SeedMoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserGroup", b =>
                {
                    b.Property<int>("GroupsGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsGroupId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserGroup");
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a998f9ea-d2ef-4835-8744-590e2f4157eb",
                            ConcurrencyStamp = "31a59e00-9c75-4aba-b898-2edabe7bc1a2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a5c6115c-a79d-444a-b92a-2f4496e2f175",
                            ConcurrencyStamp = "9fc8f25a-6168-49de-b600-f8dfb1132ece",
                            Name = "Merchant",
                            NormalizedName = "MERCHANT"
                        },
                        new
                        {
                            Id = "ebef473b-b328-426b-b5b7-40008974384c",
                            ConcurrencyStamp = "e47025d4-4088-41a2-a0ed-8f613babd585",
                            Name = "Tenant",
                            NormalizedName = "TENANT"
                        },
                        new
                        {
                            Id = "9e229e60-a76b-4088-a262-bfa9d8e1a6cd",
                            ConcurrencyStamp = "594892c6-7219-4133-a3b5-9c65f2882d6d",
                            Name = "NewTenant",
                            NormalizedName = "NEWTENANT"
                        });
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e9caf277-b4f7-48d9-a97f-c2533e6adbe3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c75e011-091b-42b5-be46-1b827205d389",
                            Email = "admin@admin.no",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Bruker",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.NO",
                            NormalizedUserName = "ADMIN@ADMIN.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEEmWgppdH/Qz88i5pd6xmkkrMfTCqyxaPzWYUklDHthcW+lZn6RropX1Bp9Shk41PA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.no"
                        },
                        new
                        {
                            Id = "b575d83e-27e5-4f5e-8a3d-a607a5bdc0fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b469786-18df-4605-bf7e-548fd36fbaff",
                            Email = "merchant@merchant.com",
                            EmailConfirmed = false,
                            FirstName = "Forhandler",
                            IsActive = true,
                            LastName = "Bruker",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCHANT@MERCHANT.COM",
                            NormalizedUserName = "MERCHANT@MERCHANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9amndl9Y3N6I4Otp6ZMbrb5zxi9aJPR0DcY3jvrgrgnAME+tKEySKHUuNPvBBHXg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "merchant@merchant.com"
                        },
                        new
                        {
                            Id = "10baaefa-d3f0-45a5-a348-ac991898e3fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eab71bb-7b22-4fb1-a693-2b136b960f53",
                            Email = "kari@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Kari",
                            IsActive = false,
                            LastName = "Nordmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARI@TENANT.NO",
                            NormalizedUserName = "KARI@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEMIVVwq9inpKvXMcKfkLoAOrvGKvoPvwhCc6S95l9dFbr5nh8voiiV+Ttmo2EZkw0A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kari@tenant.no"
                        },
                        new
                        {
                            Id = "cdf19c52-c8f0-4207-a682-36bbc27930fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ec25aaa-11cf-423e-b585-1927ea63b764",
                            Email = "ola@forhandler.no",
                            EmailConfirmed = false,
                            FirstName = "Ola",
                            IsActive = true,
                            LastName = "Nordmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLA@FORHANDLER.NO",
                            NormalizedUserName = "OLA@FORHANDLER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5dtGast5ovbdT9wS6eNtoAsEiYD6/hLuM64W57TOBwKt5I/QrdnuPQGcU6eRskXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60855191-ab42-4930-964c-e50033193198",
                            TwoFactorEnabled = false,
                            UserName = "ola@forhandler.no"
                        },
                        new
                        {
                            Id = "0e3aef22-513f-4e24-90d8-c41beb1e8942",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7753487c-06af-4a17-9944-3a2cd328ebe8",
                            Email = "tenant2@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant2",
                            IsActive = false,
                            LastName = "Bruker2",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT2@TENANT.NO",
                            NormalizedUserName = "TENANT2@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAECrMz3TC9HQagMxJaa+ApVcffcaNhUdJ1I9h6Xk4yr84ZCAtPdwZ8vRGKtyYbbxKpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "356abc0a-28f3-44ac-8fa9-d6d9779e9c3f",
                            TwoFactorEnabled = false,
                            UserName = "tenant2@tenant.no"
                        },
                        new
                        {
                            Id = "9a48960c-57c6-4577-a926-5cd8e0e7478c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dcf018b-35aa-458f-bc3c-42fa1e2639da",
                            Email = "tenant3@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant3",
                            IsActive = true,
                            LastName = "Bruker3",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT3@TENANT.NO",
                            NormalizedUserName = "TENANT3@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEIo5b012BefLNcoqP66PlPe6yQYa6taPwsH6Y4eROEdblXhC6nOg2fhQgLT3RFOTzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f9dc137-0f0e-4ecb-8fc9-e7934bc18d1e",
                            TwoFactorEnabled = false,
                            UserName = "tenant3@tenant.no"
                        },
                        new
                        {
                            Id = "3f391255-44a0-49d6-803c-555296633ed1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21d46d36-c741-4896-a6ec-92217b937a9a",
                            Email = "tenant4@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant4",
                            IsActive = true,
                            LastName = "Bruker4",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT4@TENANT.NO",
                            NormalizedUserName = "TENANT4@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAELbgJ7iLwRlPB25x3sguiqcSTzH0nkeyjtASklUf9fVcTFUe2p9FJYefOMlGLC22Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a256f91-7c17-49b1-9d50-fd332ea09be5",
                            TwoFactorEnabled = false,
                            UserName = "tenant4@tenant.no"
                        },
                        new
                        {
                            Id = "1273ff89-5875-4e1f-944c-dfc2223b06e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f35e961-5c74-441f-841c-c46001ff2cf0",
                            Email = "tenant5@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant5",
                            IsActive = true,
                            LastName = "Bruker5",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT5@TENANT.NO",
                            NormalizedUserName = "TENANT5@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEHJNhS1hABopDIcyuYuSVxUx9lz1/nFupJQIC+JL+Xt/wJlMNJ2wZC2SrPzBUn203Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ec2092b-8022-4edc-b8de-4b9c76ad47b1",
                            TwoFactorEnabled = false,
                            UserName = "tenant5@tenant.no"
                        },
                        new
                        {
                            Id = "2dd414a1-2be5-4896-ad64-d6012f06505d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68d306ab-e13d-4e94-bf71-b4270ffc9946",
                            Email = "tenant6@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant6",
                            IsActive = true,
                            LastName = "Bruker6",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT6@TENANT.NO",
                            NormalizedUserName = "TENANT6@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEPrqBmXHltwgOky/CnzUSMzKhe3pxwerjqyYwF7XTuvAS0aZrRQpA+53VcGfJoqSJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfb1ff6f-1677-4e95-b038-7af2dba6f71e",
                            TwoFactorEnabled = false,
                            UserName = "tenant6@tenant.no"
                        },
                        new
                        {
                            Id = "20f6ed72-6071-4ca2-be2d-caff78a84edd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbc4f11c-c961-484d-99c4-8cfb621e820c",
                            Email = "tenant7@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant7",
                            IsActive = true,
                            LastName = "Bruker7",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT7@TENANT.NO",
                            NormalizedUserName = "TENANT7@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7ioi2mNnDL1uek8u2JoiTC7o14QnOWWHO43xR5PZKuxdmjw5y0wyFFXIbm1mgRBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddaf48dd-74bb-4317-be0c-8cd1bec6ae61",
                            TwoFactorEnabled = false,
                            UserName = "tenant7@tenant.no"
                        },
                        new
                        {
                            Id = "cc3eafff-5099-405e-b73e-b8a2da435e7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68b737b3-716e-4540-b6c4-31bd07e7d9c6",
                            Email = "tenant8@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant8",
                            IsActive = true,
                            LastName = "Bruker8",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT8@TENANT.NO",
                            NormalizedUserName = "TENANT8@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAENoUoQUYXOFuG1icMFfbww/+fQwwHAwAy6A9HdLONPxrKt0rzq0Ohph5uZCc6pb+5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb173e2e-4f68-4bdb-a26d-321e54e77c2c",
                            TwoFactorEnabled = false,
                            UserName = "tenant8@tenant.no"
                        },
                        new
                        {
                            Id = "ae4cf9c8-69fb-48fc-9845-e96402dc5647",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e49b3a4c-14ae-4346-8376-032c8442b321",
                            Email = "tenant9@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant9",
                            IsActive = true,
                            LastName = "Bruker9",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT9@TENANT.NO",
                            NormalizedUserName = "TENANT9@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGZrFFrCpfadS7/KNIykrTyYyLoo6c/Z8R41NvIVlTx8LJDykGqswYpxtW6DRdSKCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57da4253-ce54-4b55-a784-a4f94c5e0447",
                            TwoFactorEnabled = false,
                            UserName = "tenant9@tenant.no"
                        },
                        new
                        {
                            Id = "b99dd035-d9b7-4fe6-ac8c-bdbfb94224d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7a00bcd-9524-4540-be54-eb17c2f70786",
                            Email = "tenant10@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant10",
                            IsActive = true,
                            LastName = "Bruker10",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT10@TENANT.NO",
                            NormalizedUserName = "TENANT10@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEO0y64sYpk5lv55cmkWDve+yUdoGi7hjiwU79pF610oCgypizpLmcsEp4j0GUATrFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf9103a8-57ef-4684-8aa8-25c7af4a4f00",
                            TwoFactorEnabled = false,
                            UserName = "tenant10@tenant.no"
                        },
                        new
                        {
                            Id = "becb3779-8931-4068-ac03-28ccf509db3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ef0a5a0-62b2-4c16-93b0-b2cd683ca8c3",
                            Email = "tenant11@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant11",
                            IsActive = false,
                            LastName = "Bruker11",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT11@TENANT.NO",
                            NormalizedUserName = "TENANT11@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/ZezIuEyHGkf9f2pvJNR0qp9fLBVdK1e+M7ZTUyyjGu4rhgYLxry9wfIpJQH2eBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05900cca-74df-4f0f-b36f-806fe539568c",
                            TwoFactorEnabled = false,
                            UserName = "tenant11@tenant.no"
                        },
                        new
                        {
                            Id = "6c3ff3ae-f201-4189-a082-9e3bf7bb6e8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb9eb0db-f5fb-46f6-93a6-f2ccd5bfb6f1",
                            Email = "tenant12@tenant.no",
                            EmailConfirmed = false,
                            FirstName = "Tenant12",
                            IsActive = false,
                            LastName = "Bruker12",
                            LockoutEnabled = false,
                            NormalizedEmail = "TENANT12@TENANT.NO",
                            NormalizedUserName = "TENANT12@TENANT.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/0iQjHjU7gHMeAGj4n5JUMRnt43WfVVWFYJsapEAzaEgmTYaIQb0IP6jjJP2LvyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ded2a439-57fa-4b52-8a39-5e00962553fa",
                            TwoFactorEnabled = false,
                            UserName = "tenant12@tenant.no"
                        });
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e9caf277-b4f7-48d9-a97f-c2533e6adbe3",
                            RoleId = "a998f9ea-d2ef-4835-8744-590e2f4157eb"
                        },
                        new
                        {
                            UserId = "b575d83e-27e5-4f5e-8a3d-a607a5bdc0fb",
                            RoleId = "a5c6115c-a79d-444a-b92a-2f4496e2f175"
                        },
                        new
                        {
                            UserId = "e20119f7-b5cb-43b3-8183-3f814334b160",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "0e3aef22-513f-4e24-90d8-c41beb1e8942",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "9a48960c-57c6-4577-a926-5cd8e0e7478c",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "3f391255-44a0-49d6-803c-555296633ed1",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "1273ff89-5875-4e1f-944c-dfc2223b06e9",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "2dd414a1-2be5-4896-ad64-d6012f06505d",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "20f6ed72-6071-4ca2-be2d-caff78a84edd",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "cc3eafff-5099-405e-b73e-b8a2da435e7d",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "ae4cf9c8-69fb-48fc-9845-e96402dc5647",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "b99dd035-d9b7-4fe6-ac8c-bdbfb94224d1",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "becb3779-8931-4068-ac03-28ccf509db3d",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "6c3ff3ae-f201-4189-a082-9e3bf7bb6e8b",
                            RoleId = "ebef473b-b328-426b-b5b7-40008974384c"
                        },
                        new
                        {
                            UserId = "10baaefa-d3f0-45a5-a348-ac991898e3fe",
                            RoleId = "a5c6115c-a79d-444a-b92a-2f4496e2f175"
                        },
                        new
                        {
                            UserId = "cdf19c52-c8f0-4207-a682-36bbc27930fd",
                            RoleId = "a5c6115c-a79d-444a-b92a-2f4496e2f175"
                        });
                });

            modelBuilder.Entity("LandingPage.API.Data.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActiveGroup")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            GroupName = "Group1",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 2,
                            GroupName = "Group2",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 3,
                            GroupName = "Group3",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 10,
                            GroupName = "Group10",
                            IsActiveGroup = false
                        },
                        new
                        {
                            GroupId = 11,
                            GroupName = "Group11",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 12,
                            GroupName = "Group12",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 13,
                            GroupName = "Group13",
                            IsActiveGroup = false
                        },
                        new
                        {
                            GroupId = 14,
                            GroupName = "Group14",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 15,
                            GroupName = "Group15",
                            IsActiveGroup = true
                        },
                        new
                        {
                            GroupId = 16,
                            GroupName = "Group16",
                            IsActiveGroup = true
                        });
                });

            modelBuilder.Entity("LandingPage.API.Data.GroupTenant", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("GroupTenants");

                    b.HasData(
                        new
                        {
                            GroupId = 3,
                            TenantId = 1
                        },
                        new
                        {
                            GroupId = 3,
                            TenantId = 2
                        },
                        new
                        {
                            GroupId = 1,
                            TenantId = 3
                        });
                });

            modelBuilder.Entity("LandingPage.API.Data.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            TenantId = 1,
                            IsActive = true,
                            TenantName = "Tenant1",
                            Url = "tenant1url.no/activate"
                        },
                        new
                        {
                            TenantId = 2,
                            IsActive = true,
                            TenantName = "Tenant2",
                            Url = "tenant2url.no/activate"
                        },
                        new
                        {
                            TenantId = 3,
                            IsActive = true,
                            TenantName = "Tenant3",
                            Url = "tenant3url.no/activate"
                        },
                        new
                        {
                            TenantId = 8,
                            IsActive = true,
                            TenantName = "Tenant8",
                            Url = "tenant8url.no/activate"
                        },
                        new
                        {
                            TenantId = 9,
                            IsActive = true,
                            TenantName = "Tenant9",
                            Url = "tenant9url.no/activate"
                        },
                        new
                        {
                            TenantId = 10,
                            IsActive = false,
                            TenantName = "Tenant10",
                            Url = "tenant10url.no/activate"
                        },
                        new
                        {
                            TenantId = 11,
                            IsActive = false,
                            TenantName = "Tenant11",
                            Url = "tenant11url.no/activate"
                        },
                        new
                        {
                            TenantId = 12,
                            IsActive = true,
                            TenantName = "Tenant12",
                            Url = "tenant12url.no/activate"
                        },
                        new
                        {
                            TenantId = 13,
                            IsActive = true,
                            TenantName = "Tenant13",
                            Url = "tenant13url.no/activate"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserGroup", b =>
                {
                    b.HasOne("LandingPage.API.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LandingPage.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("LandingPage.API.Data.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LandingPage.API.Data.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LandingPage.API.Data.GroupTenant", b =>
                {
                    b.HasOne("LandingPage.API.Data.Group", "Group")
                        .WithMany("GroupTenants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LandingPage.API.Data.Tenant", "Tenant")
                        .WithMany("GroupTenants")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LandingPage.API.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LandingPage.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LandingPage.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LandingPage.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LandingPage.API.Data.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LandingPage.API.Data.Group", b =>
                {
                    b.Navigation("GroupTenants");
                });

            modelBuilder.Entity("LandingPage.API.Data.Tenant", b =>
                {
                    b.Navigation("GroupTenants");
                });
#pragma warning restore 612, 618
        }
    }
}
